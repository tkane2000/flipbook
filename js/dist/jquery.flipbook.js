// Generated by CoffeeScript 1.7.1

/*

author: Trevor Thompson
flipbook plugin
 */

(function() {
  (function($, window, document) {
    'use strict';
    var Plugin, defaults, pluginName;
    pluginName = 'flipbook';
    defaults = {
      loop: false,
      ms: 300,
      images: [],
      filters: [],
      innerShadow: false
    };
    Plugin = function(element, options) {
      this.element = element;
      this.$element = $(element);
      this.w = this.$element.width();
      this.h = this.$element.height();
      this.ctx = this.element.getContext("2d");
      this.i = 0;
      this.options = null;
      if (typeof options !== 'string') {
        this.setOptions(options);
      }
      this.timeoutId = 0;
      this.grd = null;
      this.setRadialGradient();
      this.dfd = null;
      return this;
    };
    Plugin.prototype.setOptions = function(options) {
      this.options = options || {};
      return this.options = $.extend({}, this.defaults, options);
    };
    Plugin.prototype.setOption = function(key, value) {
      this.options = this.options || {};
      if ((key != null) && (value != null)) {
        return this.options[key] = value;
      }
    };
    Plugin.prototype.getCenterX = function(img) {
      return (this.$element.width() - $(img).width()) / 2;
    };
    Plugin.prototype.setRadialGradient = function() {
      this.grd = this.ctx.createRadialGradient(400, 260, 250, 420, 200, 480);
      this.grd.addColorStop(0, "transparent");
      return this.grd.addColorStop(1, "black");
    };
    Plugin.prototype.applyFilter = function(filter, var_args) {
      var args, i;
      args = [this.getPixels()];
      i = 2;
      while (i < arguments.length) {
        args.push(arguments[++i]);
      }
      return filter.apply(null, args);
    };
    Plugin.prototype.runFilter = function(filter) {
      var c, idata;
      idata = this.applyFilter(filter);
      c = this.$element;
      c.width(idata.width);
      c.height(idata.height);
      return this.ctx.putImageData(idata, 0, 0);
    };
    Plugin.prototype.getPixels = function() {
      return this.ctx.getImageData(0, 0, this.$element.width(), this.$element.height());
    };
    Plugin.prototype.addInnerShadow = function() {
      this.ctx.fillStyle = this.grd;
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };
    Plugin.prototype.drawImg = function(img) {
      var filter, x, _i, _len, _ref;
      x = $(img).width() < this.$element.width() ? this.getCenterX(img) : 0;
      this.ctx.drawImage(img, x, 0);
      _ref = this.options.filters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filter = _ref[_i];
        this.runFilter(filter);
      }
      if (this.options.innerShadow) {
        return this.addInnerShadow();
      }
    };
    Plugin.prototype.drawImgByIndex = function(i) {
      return this.drawImg(this.options.images[i]);
    };
    Plugin.prototype.flip = function() {
      var imgs, len, options;
      options = this.options;
      imgs = options.images;
      len = imgs.length;
      if (len > this.i) {
        this.drawImg(imgs[this.i]);
        this.timeoutId = setTimeout((function(_this) {
          return function() {
            _this.i = _this.i + 1;
            if (_this.i < len) {
              if (_this.dfd.state() === "pending") {
                _this.dfd.notify(_this.i);
              }
              return _this.flip(options);
            } else {
              _this.i = 0;
              _this.dfd.resolve("finished!", _this.element);
              if (options.loop) {
                return _this.flip(options);
              }
            }
          };
        })(this), options.ms);
      }
      return null;
    };
    Plugin.prototype.reset = function() {
      clearTimeout(this.timeoutId);
      return this.i = 0;
    };
    return $.fn.flipbook = function(options) {
      var args, dfd, plugin;
      plugin = null;
      args = Array.prototype.slice.call(arguments, 1);
      dfd = $.Deferred();
      dfd.promise(this);
      return this.each(function() {
        plugin = $.data(this, 'plugin_' + pluginName);
        if (!plugin) {
          if (typeof options !== 'string' || (options.images == null)) {
            plugin = new Plugin(this, options);
            $.data(this, 'plugin_' + pluginName, plugin);
          }
        }
        if (plugin) {
          plugin.dfd = dfd;
        }
        if (typeof options === 'string' && plugin[options]) {
          return plugin[options].apply(plugin, args);
        } else if (typeof options === 'object') {
          plugin.reset();
          plugin.setOptions(options);
          return plugin.flip();
        } else if (typeof options === 'undefined' || options === null) {
          plugin.reset();
          return plugin.flip();
        } else {
          return $.error('Method ' + options + ' does not exist on jQuery.flipbook.  \nmethods: ' + plugin);
        }
      });
    };
  })(jQuery, window, document);

}).call(this);
