// Generated by CoffeeScript 1.4.0

/* controller
*/


(function() {
  var com;

  if (!com) {
    com = {};
  }

  if (!com.tkthompson) {
    com.tkthompson = {};
  }

  window.com = com;

  com.tkthompson.preloadImgs = function(urls, callback) {
    var concatImgTags, i, img, imgTags, imgUrl, imgs, setSrc, _i, _j, _len, _len1;
    imgTags = "";
    concatImgTags = function() {
      return imgTags = "" + imgTags + "<img />";
    };
    setSrc = function(i, img) {
      var url;
      url = urls[i - 1];
      return img.src = url;
    };
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      imgUrl = urls[_i];
      concatImgTags(imgUrl);
    }
    imgs = $("" + imgTags);
    for (i = _j = 0, _len1 = imgs.length; _j < _len1; i = ++_j) {
      img = imgs[i];
      setSrc(i + 1, img);
    }
    return imgs.imagesLoaded({
      callback: function($images, $proper, $broken) {
        return callback($images, $proper, $broken);
      }
    });
  };

  com.tkthompson.Filters = {
    grayscale: function(pixels) {
      var b, d, g, i, r, v;
      d = pixels.data;
      i = 0;
      while (i < d.length) {
        r = d[i];
        g = d[i + 1];
        b = d[i + 2];
        v = 0.2126 * r + 0.7152 * g + 0.0722 * b;
        d[i] = d[i + 1] = d[i + 2] = v;
        i += 4;
      }
      return pixels;
    }
  };

  $(document).ready(function() {
    var $canvas, $canvasEl, imgs, model, onImagesLoaded, urls;
    model = com.tkthompson.model;
    $canvas = $("canvas");
    $canvasEl = $canvas[0];
    onImagesLoaded = function($images, $proper, $broken) {
      $images.width(800).height(533);
      $canvas.flipbook('setOptions', {
        images: $images,
        filters: [com.tkthompson.Filters.grayscale],
        innerShadow: true,
        ms: 160
      });
      $canvas.flipbook('drawImg', $images[0]);
      $('.start').click(function(e) {
        e.preventDefault();
        return $canvas.flipbook();
      });
      $canvas.click(function(e) {
        return $canvas.flipbook().done(function(status, el) {}).progress(function(status) {});
      });
      $('.filterToggle').data('filterToggleBool', true).click(function(e) {
        var bool, fltrs;
        e.preventDefault();
        bool = $(this).data('filterToggleBool') ? false : true;
        $(this).data('filterToggleBool', bool);
        fltrs = bool ? [com.tkthompson.Filters.grayscale] : [];
        $canvas.flipbook('setOption', 'filters', fltrs);
        return $canvas.flipbook('drawImg', $images[0]);
      });
      return $('.gradientToggle').data('gradientToggleBool', true).click(function(e) {
        var bool;
        e.preventDefault();
        bool = $(this).data('gradientToggleBool') ? false : true;
        $(this).data('gradientToggleBool', bool);
        $canvas.flipbook('setOption', 'innerShadow', bool);
        return $canvas.flipbook('drawImg', $images[0]);
      });
    };
    urls = model.getImageUrls('surf', 30);
    return imgs = com.tkthompson.preloadImgs(urls, onImagesLoaded);
  });

  /* --------------------------------------------
       Begin model.coffee
  --------------------------------------------
  */


  if (!(com != null)) {
    com = {};
  }

  if (!(com.tkthompson != null)) {
    com.tkthompson = {};
  }

  if (!(com.tkthompson.model != null)) {
    com.tkthompson.model = {};
  }

  com.tkthompson.model.getImageUrls = function(name, count) {
    var imgUrls, num, total;
    total = count;
    return imgUrls = (function() {
      var _results;
      _results = [];
      while (count -= 1) {
        num = total - count;
        _results.push("/images/" + name + "/" + name + "-" + num + ".jpg");
      }
      return _results;
    })();
  };

  /* --------------------------------------------
       Begin jquery.flipbook.coffee
  --------------------------------------------
  */


  /*
  
  author: Trevor Thompson
  flipbook plugin
  */


  (function($, window, document) {
    'use strict';

    var Plugin, defaults, pluginName;
    pluginName = 'flipbook';
    defaults = {
      loop: false,
      ms: 300,
      images: [],
      filters: [],
      innerShadow: false
    };
    Plugin = function(element, options) {
      this.element = element;
      this.$element = $(element);
      this.w = this.$element.width();
      this.h = this.$element.height();
      this.ctx = this.element.getContext("2d");
      this.i = 0;
      this.options = null;
      if (typeof options !== 'string') {
        this.setOptions(options);
      }
      this.timeoutId = 0;
      this.grd = null;
      this.setRadialGradient();
      this.dfd = null;
      return this;
    };
    Plugin.prototype.setOptions = function(options) {
      this.options = options || {};
      return this.options = $.extend({}, this.defaults, options);
    };
    Plugin.prototype.setOption = function(key, value) {
      this.options = this.options || {};
      if ((key != null) && (value != null)) {
        return this.options[key] = value;
      }
    };
    Plugin.prototype.getCenterX = function(img) {
      return (this.$element.width() - $(img).width()) / 2;
    };
    Plugin.prototype.setRadialGradient = function() {
      this.grd = this.ctx.createRadialGradient(400, 260, 250, 420, 200, 480);
      this.grd.addColorStop(0, "transparent");
      return this.grd.addColorStop(1, "black");
    };
    Plugin.prototype.applyFilter = function(filter, var_args) {
      var args, i;
      args = [this.getPixels()];
      i = 2;
      while (i < arguments.length) {
        args.push(arguments[++i]);
      }
      return filter.apply(null, args);
    };
    Plugin.prototype.runFilter = function(filter) {
      var c, idata;
      idata = this.applyFilter(filter);
      c = this.$element;
      c.width(idata.width);
      c.height(idata.height);
      return this.ctx.putImageData(idata, 0, 0);
    };
    Plugin.prototype.getPixels = function() {
      return this.ctx.getImageData(0, 0, this.$element.width(), this.$element.height());
    };
    Plugin.prototype.addInnerShadow = function() {
      this.ctx.fillStyle = this.grd;
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };
    Plugin.prototype.drawImg = function(img) {
      var filter, x, _i, _len, _ref;
      x = $(img).width() < this.$element.width() ? this.getCenterX(img) : 0;
      this.ctx.drawImage(img, x, 0);
      _ref = this.options.filters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        filter = _ref[_i];
        this.runFilter(filter);
      }
      if (this.options.innerShadow) {
        return this.addInnerShadow();
      }
    };
    Plugin.prototype.drawImgByIndex = function(i) {
      return this.drawImg(this.options.images[i]);
    };
    Plugin.prototype.flip = function() {
      var img, imgs, len, options,
        _this = this;
      options = this.options;
      imgs = options.images;
      len = imgs.length;
      if (len > this.i) {
        img = this.drawImg(imgs[this.i]);
        this.timeoutId = setTimeout(function() {
          _this.i = _this.i + 1;
          if (_this.i < len) {
            if (_this.dfd.state() === "pending") {
              _this.dfd.notify(_this.i);
            }
            _this.flip(options);
          } else {
            _this.i = 0;
            _this.dfd.resolve("finished!", _this.element);
            if (options.loop) {
              _this.flip(options);
            }
          }
          return img;
        }, options.ms);
      }
      return imgs;
    };
    Plugin.prototype.reset = function() {
      clearTimeout(this.timeoutId);
      return this.i = 0;
    };
    return $.fn.flipbook = function(options) {
      var args, dfd, plugin;
      plugin = null;
      args = Array.prototype.slice.call(arguments, 1);
      dfd = $.Deferred();
      dfd.promise(this);
      return this.each(function() {
        plugin = $.data(this, 'plugin_' + pluginName);
        if (!plugin) {
          if (typeof options !== 'string' || !(options.images != null)) {
            plugin = new Plugin(this, options);
            $.data(this, 'plugin_' + pluginName, plugin);
          }
        }
        if (plugin) {
          plugin.dfd = dfd;
        }
        if (typeof options === 'string' && plugin[options]) {
          return plugin[options].apply(plugin, args);
        } else if (typeof options === 'object') {
          plugin.reset();
          plugin.setOptions(options);
          return plugin.flip();
        } else if (typeof options === 'undefined' || options === null) {
          plugin.reset();
          return plugin.flip();
        } else {
          return $.error('Method ' + options + ' does not exist on jQuery.flipbook.  \nmethods: ' + plugin);
        }
      });
    };
  })(jQuery, window, document);

}).call(this);
